{"version":3,"sources":["componente/addCategoria.js","util/getGift.js","componente/grillaGiftItem.js","componente/grillaGift.js","hooks/useFetchGift.js","gifExpertApp.js","index.js"],"names":["AddCategoria","setcategorias","useState","valor","setValor","onSubmit","e","preventDefault","trim","length","cate","type","value","onChange","target","placeholder","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gift","map","img","id","title","images","downsized_medium","GrillaGiftItem","className","src","alt","GrillaGift","loading","objeto","setObjeto","useEffect","then","setTimeout","useFetchGift","imagenes","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"mMAkCeA,EA/BM,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEhBC,mBAAU,IAFM,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAc5C,OACE,sBAAMC,SATS,SAAEC,GACbA,EAAEC,iBACGJ,EAAMK,OAAOC,OAAS,IACvBR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAgBO,OACnCN,EAAU,OAKlB,SACE,uBACMO,KAAK,OACLC,MAAQT,EACRU,SAfY,SAAEP,GAAF,OAASF,EAASE,EAAEQ,OAAOF,QAgBvCG,YAAY,4B,+BCtBTC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEkCC,UAAWH,GAF7C,+DAGFI,MAAMF,GAHJ,cAGfG,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAS,IAAD,EAC3B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVrB,kBAadM,GAbc,4CAAH,sDCWPO,EAVQ,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAEhC,OACE,sBAAKc,UAAU,+DAAf,UACC,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCiBUO,EApBI,SAAC,GAAqB,IAAlBnB,EAAiB,EAAjBA,UAAiB,ECDZ,SAAEA,GAAgB,IAAD,EAEbf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAJ4B,mBAElCC,EAFkC,KAE1BC,EAF0B,KAyBzC,OAlBAC,qBAAW,WAEPxB,EAASC,GACLwB,MAAM,SAAAd,GAENe,YAAW,WACPH,EAAU,CACNf,KAAMG,EACNU,SAAS,MAEd,UAIR,CAAEpB,IAIEqB,EDtB8BK,CAAc1B,GAArC2B,EAFsB,EAE5BpB,KAAiBa,EAFW,EAEXA,QAE3B,OACE,qCACE,qBAAIJ,UAAU,sCAAd,cAAuDhB,EAAvD,OACEoB,GAAW,mBAAGJ,UAAU,8CAAb,4BACb,qBAAKA,UAAU,mBAAf,SACIW,EAASlB,KAAK,SAAAC,GAAG,OACnB,cAAC,EAAD,eAEaA,GADCA,EAAIC,aEeXiB,EA1BM,WAAQ,IAAD,EAEa3C,mBAAU,CAAC,KAFxB,mBAEjB4C,EAFiB,KAEL7C,EAFK,KAKxB,OACI,qCACI,gDACA,cAAC,EAAD,CAAcA,cAAgBA,IAC9B,uBAEA,6BAEI6C,EAAWpB,KAAK,SAAAT,GAAS,OAEzB,aADA,CACC,EAAD,CAEQA,UAAYA,GADNA,Y,MCd9B8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.69a175a1.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropsTypes from \"prop-types\";\n\nconst AddCategoria = ( { setcategorias } ) => {\n    \n    const [valor, setValor] = useState( '' );\n\n    const inputChange = ( e ) => setValor(e.target.value);\n\n    const submit = ( e ) => {\n        e.preventDefault();\n        if ( valor.trim().length > 2 ) {\n            setcategorias( cate => [ valor, ...cate ]);\n            setValor( ' ' );\n        }\n    };\n    \n  return (\n    <form onSubmit={ submit }>\n      <input \n            type=\"text\"\n            value={ valor }\n            onChange={ inputChange }\n            placeholder=\"que gif quieres ver?\"\n      />\n      {/* <button> agregar catigoria </button> */}\n    </form>\n  )\n}\n\nAddCategoria.propTypes = {\n    setcategorias: PropsTypes.func.isRequired\n}\n\nexport default AddCategoria\n","\n  export const getGifs = async( categoria ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( categoria ) }&limit=10&api_key=YJDf0n5EvNLIS7yKWQdeQdYd97OnQH0q`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gift = data.map( img =>  {\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url,\n        }\n    });\n    return gift;\n  }","import React from 'react'\n\nconst GrillaGiftItem = ( { title, url } ) => {\n\n  return (\n    <div className=\"tarjeta animate__animated animate__flipInX animate__delay-1s\">\n     <img src={ url } alt={ title } /> \n     <p> { title } </p>\n    </div>\n  )\n}\n\nexport default GrillaGiftItem\n","import React from 'react'\nimport { useFetchGift } from '../hooks/useFetchGift'\nimport GrillaGiftItem from './grillaGiftItem';\n\nconst GrillaGift = ( { categoria } ) => {\n\n    const { data: imagenes , loading } = useFetchGift( categoria );\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__flipInX \"> { categoria } </h3>\n      { loading && <p className=\"animate__animated animate__lightSpeedInLeft\">Cargando......</p> }\n      <div className=\"grillas-tarjetas\">\n        { imagenes.map( img =>\n        <GrillaGiftItem \n                key={ img.id }  \n                { ...img } />\n        )}\n      </div>\n    </>\n    \n  )\n}\n\nexport default GrillaGift\n","import { useEffect, useState } from 'react'\nimport { getGifs } from '../util/getGift';\n\nexport const useFetchGift = ( categoria ) => {\n    \n    const [objeto, setObjeto] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        getGifs( categoria )\n           .then( img => {\n\n            setTimeout(()=>{\n                setObjeto({\n                    data: img,\n                    loading: false\n                });\n            }, 3000)\n\n           });\n\n    }, [ categoria ])\n\n\n\n    return objeto;\n\n}\n\n","import React, { useState } from \"react\";\nimport AddCategoria from \"./componente/addCategoria\";\nimport GrillaGift from \"./componente/grillaGift\";\n\nconst GifExpertApp = ( ) => {\n\n    const [categorias, setcategorias ] = useState( [''] );\n    // const add = () => setcategorias( cate => [ ...categorias, 'Digimon' ] );\n    // const add = () => setcategorias( [ ...categorias, 'Digimon' ] );\n    return (\n        <>\n            <h2> GifExpertApp </h2>\n            <AddCategoria setcategorias={ setcategorias }/>\n            <hr />\n\n            <ol>\n            { \n                categorias.map( categoria => \n                // (<li key={ categoria }> { categoria } </li>)\n                <GrillaGift\n                        key={ categoria }\n                        categoria={ categoria }\n                />\n                )\n            }\n            </ol>\n        </>\n\n    );\n}\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from \"./gifExpertApp\";\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}